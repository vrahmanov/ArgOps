#!/bin/sh
# Instalation variables
CLUSTER_DOMAIN=vladi.local
API_PORT=6443
HTTP_PORT=80
HTTPS_PORT=443
CLUSTER_NAME=k3d-cluster
READ_VALUE=
SERVERS=1
AGENTS=2
TRAEFIK_V2=Yes
INSTALL_INGRESS=Yes
INSTALL_ARGOCD=Yes

# bold text
bold=$(tput bold)
normal=$(tput sgr0)
yes_no="(${bold}Y${normal}es/${bold}N${normal}o)"


# $1 text to show - $2 default value
read_value ()
{
    read -p "${1} [${bold}${2}${normal}]: " READ_VALUE
    if [ "${READ_VALUE}" = "" ]
    then
        READ_VALUE=$2
    fi
}

# Check if exist docker, k3d and kubectl
checkDependencies ()
{
    # Check Docker
    if ! type docker > /dev/null; then
        echo "Docker could not be found. Installing it ..."
        curl -L -o ./install-docker.sh "https://get.docker.com"
        chmod +x ./install-docker.sh
        ./install-docker.sh
        sudo usermod -aG docker $USER
        #exit
    fi

    # Check K3D
    if ! type k3d > /dev/null; then
        echo "K3D could not be found. Installing it ..."
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
        # Install k3d autocompletion for bash
        echo "source <(k3d completion bash)" >> ~/.bashrc
        #exit
    fi

    # Check Kubectl
    if ! type kubectl > /dev/null; then
        echo "Kubectl could not be found. Installing it ..."
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client
        #exit
    fi

    # Check Helm
    if ! type helm > /dev/null; then
        echo "Helm could not be found. Installing it ..."
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod +x ./get_helm.sh
        ./get_helm.sh

        # Add default repos
        helm repo add stable https://charts.helm.sh/stable
        # Add bitnami helm repos
        helm repo add bitnami https://charts.bitnami.com/bitnami
        # Update helm
        helm repo update
        #exit
    fi
}

header()
{
    echo "\n\n${bold}${1}${normal}\n-------------------------------------"
}
footer()
{
    echo "-------------------------------------"
}
configValues ()
{
  read_value "Cluster Name" "${CLUSTER_NAME}"
  CLUSTER_NAME=${READ_VALUE}
  read_value "Cluster Domain" "${CLUSTER_DOMAIN}"
  CLUSTER_DOMAIN=${READ_VALUE}
  read_value "API Port" "${API_PORT}"
  API_PORT=${READ_VALUE}
  read_value "Servers (Masters)" "${SERVERS}"
  SERVERS=${READ_VALUE}
  read_value "Agents (Workers)" "${AGENTS}"
  AGENTS=${READ_VALUE}
  read_value "LoadBalancer HTTP Port" "${HTTP_PORT}"
  HTTP_PORT=${READ_VALUE}
  read_value "LoadBalancer HTTPS Port" "${HTTPS_PORT}"
  HTTPS_PORT=${READ_VALUE}
}
installCluster ()
{
  header "Deleting Previous Cluster"
  k3d cluster delete ${CLUSTER_NAME}
  footer

  header "Creating K3D cluster"
#https://github.com/rancher/k3d/blob/main/tests/assets/config_test_simple.yaml
  cat <<EOF  > tmp-k3d-${CLUSTER_NAME}.yaml
apiVersion: k3d.io/v1alpha2
kind: Simple
name: ${CLUSTER_NAME}
servers: ${SERVERS}
agents: ${AGENTS}
kubeAPI:
  hostIP: "0.0.0.0"
  hostPort: "${API_PORT}" # kubernetes api port 6443:6443

image: rancher/k3s:latest
#image: rancher/k3s:v1.19.4-k3s1

volumes:
#  - volume: $(pwd)/k3deploy/helm-ingress-ngnx.yaml:/var/lib/rancher/k3s/server/manifests/helm-ingress-nginx.yaml
  - volume: $(pwd)/k3dvol:/k3dvol # volume in host:container
    nodeFilters:
      - all

ports:
  - port: ${HTTP_PORT}:80 # http port host:container
    nodeFilters:
      - loadbalancer
  - port: 0.0.0.0:${HTTPS_PORT}:443 # https port host:container
    nodeFilters:
      - loadbalancer

env:
  - envVar: secret=token
    nodeFilters:
      - all
labels:
  - label: best_cluster=forced_tag
    nodeFilters:
      - server[0] #
      - loadbalancer

#registries:
#  create: true
#  use: []
#  config: |
#    mirrors:
#      "my.company.registry":
#        endpoint:
#          - http://my.company.registry:5000

options:
  k3d:
    wait: true
    timeout: "60s" # avoid an start/stop cicle when start fails
    disableLoadbalancer: false
    disableImageVolume: false
  k3s:
    extraServerArgs:
      - --tls-san=127.0.0.1
      - --no-deploy=traefik
#      - --flannel-backend=none

    extraAgentArgs: []
  kubeconfig:
    updateDefaultKubeconfig: true # update kubeconfig when cluster starts
    switchCurrentContext: true # change this cluster context when cluster starts
EOF

  k3d cluster create --config tmp-k3d-${CLUSTER_NAME}.yaml

 #   k3d cluster create ${CLUSTER_NAME} \
 #   --api-port ${API_PORT} \
 #   --port ${HTTPS_PORT}:443@loadbalancer  \
 #   --port ${HTTP_PORT}:80@loadbalancer \
 #   --volume $(pwd)/k3dvol:/tmp/k3dvol \
 #   --servers ${SERVERS} \
 #   --agents ${AGENTS} \
 #   --volume "$(pwd)/deployments/helm-ingress-nginx.yaml:/var/lib/rancher/k3s/server/manifests/helm-ingress-nginx.yaml" \
 #   --k3s-server-arg '--no-deploy=traefik'

  header "waiting for cluster init ..."
  sleep 5

  kubectl config use-context k3d-${CLUSTER_NAME}
  kubectl cluster-info
  footer

  header "Provisioning Persistent Volume"
  cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: PersistentVolume
metadata:
  name: k3d-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/k3dvol"
EOF
#  kubectl describe pv k3d-pv
  footer
}
installIngress ()
{
  header "Instaling Ingress"
  # Create Namespace
  generateCert
  kubectl create namespace ingress
  # Create a secret with server certificate
  kubectl --namespace ingress create secret tls nginx-server-certs --key ./${CLUSTER_DOMAIN}+1-key.pem --cert ./${CLUSTER_DOMAIN}+1.pem
  # Install ingress with tls enabled providing certificates stored in namespace
#  cat <<EOF | helm install --namespace ingress -f - ingress nginx-stable/nginx-ingress #bitnami/nginx-ingress-controller
#  cat <<EOF | helm install --namespace ingress -f - ingress bitnami/nginx-ingress-controller
cat <<EOF | helm install --namespace ingress -f - ingress nginx-stable/nginx-ingress
extraArgs:
  default-ssl-certificate: "ingress/nginx-server-certs"
EOF
  footer
  sleep 5
  header "LoadBalancer info:"
  kubectl -n ingress get svc | egrep -e NAME -e LoadBalancer
  footer
  #kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml
}
generateCert ()
{
  header "Generating Cert for ${CLUSTER_DOMAIN}"
  mkcert ${CLUSTER_DOMAIN} "*.${CLUSTER_DOMAIN}"
  header "Installing Cert for ${CLUSTER_DOMAIN}"
  mkcert --install
  header "Adding 127.0.0.1 argocd.${CLUSTER_DOMAIN} to your /etc/hosts "
  sudo -- sh -c "echo 127.0.0.1 argocd.${CLUSTER_DOMAIN} >> /etc/hosts"
}
installArogcd()
{
  header "Instaling ArgoCd"
  kubectl create namespace argocd || printf "\n Namespace exists\n"
  kubectl create namespace guestbookex || printf "\n Namespace exists\n"
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || printf "\n Stabel version deployed \n"

  cat <<EOF | kubectl apply -f -
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - argocd.${CLUSTER_DOMAIN}
      secretName: nginx-server-certs
  rules:
    - host: argocd.${CLUSTER_DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 80
    - host: argocd2.${CLUSTER_DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 80
EOF
printf "\n Waiting for all argocd pods to be ready \n"
while test "$(! kubectl get pods -n argocd 2>/dev/null | grep -c "1/1")" -lt "7"; do
  sleep 2
  printf "."
done
  header "Applying portforwarding"
  nohup kubectl port-forward svc/argocd-server -n argocd 8080:80 &
  argocd login argocd.${CLUSTER_DOMAIN}:8080 --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure
  header "Creating Demo App with Sync"
  argocd app create guestbook --repo https://github.com/argoproj/argocd-example-apps.git --path guestbook --dest-server https://kubernetes.default.svc --dest-namespace guestbookex
  argocd app sync guestbook
  header "Access to argo with admin:$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo)"
  echo "https://argocd.${CLUSTER_DOMAIN}:8080"
  open "https://argocd.${CLUSTER_DOMAIN}:8080"
  footer
}

isSelected()
{
  if [ "${1}" = "Yes" ] || [ "${1}" = "yes" ] || [ "${1}" = "Y" ]  || [ "${1}" = "y" ];
  then
    echo 1
  else
    echo 0
  fi
}
installAddons ()
{
  read_value "Install Ingress? ${yes_no}" "${INSTALL_INGRESS}"
  if [ $(isSelected ${READ_VALUE})  = 1 ];
  then
      installIngress
  fi
  read_value "Install Argocd? ${yes_no}" "${INSTALL_ARGOCD}"
  if [ $(isSelected ${READ_VALUE}) = 1 ];
  then
      installArogcd
  fi

}
checkDependencies
configValues
installCluster
installAddons
